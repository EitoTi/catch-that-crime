	TEST CASE FOR CONFIGURATION
***NOTE: READING THE FILE sa_tc_02_config***


    	Configuration * config = new Configuration("sa_tc_02_config");
    	cout << config->str() << endl;
    	delete config;


-----------------------------------------------------------------

	TEST CASE FOR MOVING OBJECT (SHERLOCK, WATSON, CRIMINAL)
***NOTE : NEED TO FINISH MapElement, Position, ArrayMovingObject***


        int num_walls = 3;
        Position arr_walls[] = {Position(1, 2), Position(2, 3), Position(3, 4)};
        int num_fake_walls = 1;
        Position arr_fake_walls[] = {Position(2, 0)};

        Map * map = new Map(10, 10, num_walls, arr_walls, num_fake_walls, arr_fake_walls);
        
        Sherlock * sherlock = new Sherlock(1, "RUU", Position(1, 3), map, 250, 450);
        cout << sherlock->str() << endl;

        Watson * watson = new Watson(2, "LU", Position(2, 1), map, 300, 350);
        cout << watson->str() << endl;

        Criminal * criminal = new Criminal(0, Position(7, 9), map, sherlock, watson);
        cout << criminal->str() << endl;

        cout << "* Sherlock makes a move" << endl;
        sherlock->move();
        cout << sherlock->str() << endl;

        cout << "* Watson makes a move" << endl;
        watson->move();
        cout << watson->str() << endl;

        cout << "* Criminal makes a move" << endl;
        criminal->move();
        cout << criminal->str() << endl;

        ArrayMovingObject * arr_mv_objs = new ArrayMovingObject(10);
        arr_mv_objs->add(criminal);
        arr_mv_objs->add(sherlock);
        arr_mv_objs->add(watson);
        cout << arr_mv_objs->str() << endl;
        
        delete arr_mv_objs;
        delete sherlock;
        delete watson;
        delete criminal;
        delete map;

-------------------------------------------------------------------------------------
		TEST CASE FOR ROBOTC


        int num_walls = 3;
        Position arr_walls[] = {Position(1, 2), Position(2, 3), Position(3, 4)};
        int num_fake_walls = 1;
        Position arr_fake_walls[] = {Position(2, 0)};

        Map * map = new Map(10, 10, num_walls, arr_walls, num_fake_walls, arr_fake_walls);

        Sherlock * sherlock = new Sherlock(1, "RUU", Position(1, 3), map, 250, 450);
        Watson * watson = new Watson(2, "LU", Position(2, 1), map, 300, 350);
        Criminal * criminal = new Criminal(0, Position(7, 9), map, sherlock, watson);
        criminal->move();

        RobotC * robotC = new RobotC(3, Position(7,9), map, criminal);
        cout << "Current position of Criminal: " << criminal->str() << endl;
        cout << "Criminal makes a move" << endl;
        criminal->move();
        cout << "New position of Criminal: " << criminal->str() << endl;

        cout << "Current position of robotC: " << robotC->str() << endl;
        cout << "RobotC makes a move" << endl;
        robotC->move();
        cout << "New position of robotC: " << robotC->str() << endl;

        delete sherlock;
        delete watson;
        delete criminal;
        delete map;
        delete robotC;

------------------------------------------------------------------------------------
		TEST CASE FOR BASE BAG

	int num_walls = 3;
	Position arr_walls[] = { Position(1, 2), Position(2, 3), Position(3, 4) };
	int num_fake_walls = 1;
	Position arr_fake_walls[] = { Position(2, 0) };

	Map* map = new Map(10, 10, num_walls, arr_walls, num_fake_walls, arr_fake_walls);

	Sherlock* sherlock = new Sherlock(1, "RUU", Position(1, 3), map, 101, 150);

	BaseItem* magicBook = new MagicBook();
	BaseItem* energyDrink = new EnergyDrink();
	BaseItem* firstAid = new FirstAid();
	BaseItem* excemptionCard = new ExcemptionCard();
	BaseItem* passingCard = new PassingCard("RobotS");

	BaseBag* sherlockBag = new SherlockBag(sherlock);
	sherlockBag->insert(magicBook);
	sherlockBag->insert(energyDrink);
	sherlockBag->insert(firstAid);
	sherlockBag->insert(energyDrink);
	sherlockBag->insert(excemptionCard);
	sherlockBag->insert(passingCard);
	sherlockBag->insert(firstAid);
	sherlockBag->insert(excemptionCard);
	cout << sherlockBag->str() << endl; // Test insert()
	// ________________________________
	// Test get()
	// sherlockBag->get();
	// cout << sherlockBag->str() << endl;
	// sherlockBag->get();
	// cout << sherlockBag->str() << endl;    
	// sherlockBag->get();
	// cout << sherlockBag->str() << endl;
	// sherlockBag->get();
	// cout << sherlockBag->str() << endl;

	// ________________________________
	// Test get(ItemType)
	// sherlockBag->get(MAGIC_BOOK);
	// cout << sherlockBag->str() << endl;
	// sherlockBag->get(EXCEMPTION_CARD);
	// cout << sherlockBag->str() << endl;